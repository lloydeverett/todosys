#!/usr/bin/env python3

from datetime import datetime
import re
import sys

datetime_format = '%a %d %b %I:%M %p %Y'

usage_msg = '''either specify no args for default behaviour, or give all of them:
backlog [input] [output] [secondary-output]
Flags such as "--invert" may appear anywhere.
Use "-" as an arg to represent standard in or standard out.'''

##################################################################################
# parse args
##################################################################################

input_filename = '-'
output_filename = '-'
secondary_filename = 'backlog.txt'
invert = False
args = sys.argv[1:]
if '--invert' in args or '-i' in args:
    invert = True
    args = [arg for arg in args if arg != '--invert' and arg != '-i']
if args:
    if len(args) != 3:
        exit(usage_msg)
    input_filename = args[0]
    output_filename = args[1]
    secondary_filename = args[2]

##################################################################################
# let's start by trying to parse all the TODOs
##################################################################################

class Todo:
    def __init__(self, content, dt=None):
        self.content = content
        self.dt = dt
class Filler:
    def __init__(self, content):
        self.content = content
nodes = []
isFiller = True
accumulated_content = ''
with (sys.stdin if input_filename == '-' else open(input_filename, 'r')) as input_file:
    for line in input_file:
        if line.startswith('> '):
            # end off current token
            if accumulated_content:
                nodes.append(Filler(accumulated_content) if isFiller else Todo(accumulated_content))
            # get ready to read next todo
            accumulated_content = ''
            isFiller = False
        elif accumulated_content and not isFiller and re.search(r"^[=-]+$", line):
            # end off current todo
            nodes.append(Todo(accumulated_content))
            # get ready to read filler
            accumulated_content = ''
            isFiller = True

        accumulated_content = accumulated_content + line
if accumulated_content:
    nodes.append(Filler(accumulated_content) if isFiller else Todo(accumulated_content))

# enrich with dates where possible
for node in nodes:
    if not isinstance(node, Todo):
        continue
    re_match = re.search(r"\[(.*)\]", node.content)
    if re_match:
        result = None
        try:
            result = datetime.strptime(re_match.group(1), datetime_format)
        except ValueError as e:
            continue
        node.dt = result

##################################################################################
# ok, now let's move everything not relevant for today into the backlog
##################################################################################

output_file = sys.stdout if output_filename == '-' else open(output_filename, 'w')
backlog_prepend = ''
now = datetime.now()
for node in nodes:
    if not isinstance(node, Todo) or node.dt is None or \
      (not invert and node.dt < now) or (invert and not (node.dt < now)):
        # we want to keep this around, so write it to stdout
        output_file.write(node.content)
    else:
        # todo is marked for the future, so needs to go into the backlog
        backlog_prepend = backlog_prepend + node.content.strip() + '\n'
if output_file is not sys.stdout:
    output_file.close()

if secondary_filename == '-':
    sys.stdout.write(backlog_prepend)
else:
    secondary_file = open(secondary_filename, 'r+')
    old_data = secondary_file.read()
    secondary_file.seek(0)
    secondary_file.write(backlog_prepend + old_data)
    secondary_file.close()

